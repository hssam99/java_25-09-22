package f1_project;

import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;


// 게임 시작 후 플레이어가 선택한 캐릭터 생성 관련 컨트롤러

public class PlayerController {
	
	Scanner sc = new Scanner(System.in);
	
	DotArtController dac = new DotArtController();
	
	private List <Constructor> constructorList; // 컨스트럭터 리스트
	
	public PlayerController() {
		constructorList = new ArrayList<>();
		initConstructors();
	}
	
	// 기본 팀 및 드라이버 초기화 
	private void initConstructors() {
		Constructor redbull = new Constructor ("Redbull", 1);
		redbull.addDriver(new Driver(1, "Redbull", "막스베르스타펜", "27", "네덜란드", 66, 0));
		redbull.addDriver(new Driver(2, "Redbull", "유키츠노다", "25", "일본", 0, 1));

		Constructor ferrari = new Constructor ("Ferrari", 2);
		ferrari.addDriver(new Driver(3, "Ferrari", "샤를르끌레르", "27", "모나코", 6, 1));
		ferrari.addDriver(new Driver(4, "Ferrari", "루이스해밀턴", "40", "영국", 105, 0));

		constructorList.add(redbull);
		constructorList.add(ferrari);
		
	}
	
	// 팀 목록 출력
	public void printConstructors() {
		System.out.println("=== 팀 목록 ===");
		for (int i = 0; i < constructorList.size(); i++) {
			System.out.println((i+1) + ". " + constructorList.get(i).getConstructorName());
			
		}
	}
	
	
	// 사용자로부터 팀 선택받기
	public Constructor chooseConstructor() {
		Constructor selected = null;
		while (selected == null) {
			printConstructors(); // 컨스트럭터 리스트 출력
			System.out.print("팀을 선택하세요 (번호 입력) > ");
			int choice = sc.nextInt();
			sc.nextLine(); // 개행 문자 소비
			
			if (choice >= 1 && choice <= constructorList.size()) {
				selected = constructorList.get(choice - 1); // 팀 선택
				System.out.println("선택한 팀: " + selected.getConstructorName());
			} else {
				System.err.println("잘못된 선택입니다. 다시 입력하세요.");
			}
		}
		
		return selected;
	}
	
	// 선택한 팀의 드라이버 목록 출력
	public void printDrivers (Constructor constructor) {
		List<Driver> drivers = constructor.getDriverList();
		System.out.println("=== " + constructor.getConstructorName() + "드라이버 목록 ===");
		for (int i = 0; i < drivers.size(); i++) {
			System.out.println((i+1) + ". " + drivers.get(i).getDriverName());
		}
	}
	
	// 사용자로부터 드라이버 선택받기
	public Driver chooseDriver(Constructor constructor) {
		Driver selectedDriver = null;
		while (selectedDriver == null) {
			printDrivers(constructor);
			System.out.print("드라이버를 선택하세요 (번호 입력) > ");
			int choice = sc.nextInt();
			sc.nextLine();
			
			List <Driver> driverList = constructor.getDriverList(); // 해당 컨스트럭트의 드라이버 리스트
			if (choice >= 1 && choice <= driverList.size()) {
				// 복사 생성자를 이용해 새로운 객체 생성
				selectedDriver = driverList.get(choice - 1);
				System.out.println("선택한 드라이버: " + selectedDriver.getDriverName());
			} else {
				System.out.println("잘못된 선택입니다. 다시 입력하세요.");
			}
		}
		
		return selectedDriver;
	}
	
	
	
	
	// AI 드라이버 출발 속도 랜덤 생성 (사용자 드라이버 제외)
	public void generateAIStartSpeeds(Constructor constructor, Driver userDriver) {
		constructor.generateAIStartSpeeds(userDriver);
	}
	
	   // 전체 팀 리스트 반환
    public List<Constructor> getConstructorList() {
        return constructorList;
}
	
	
	

	
	
	
	public void makeCircuitList() {
		Circuit silverStone = new Circuit(1,"실버스톤", "영국", 5891.0);
		Circuit monza = new Circuit(2,"몬자", "이탈리아", 5793.0);
		Circuit monaco = new Circuit(3,"모나코", "모나코", 3337.0);
		Circuit shanghai = new Circuit(4,"상하이", "중국", 5451.0);
	}
	
	
	
	
	// 서킷 번호 리턴
	public int chooseCircuit(Scanner sc) {
		dac.printcircuitMap();
		
		System.out.println("1. 실버스톤 | 2. 몬자 | 3. 모나코 | 4. 상하이");
		System.out.println("[0] 게임 종료");
		System.out.print("써킷을 선택하세요 > ");
		
		int circuitNum = sc.nextInt();
		
		return circuitNum;
		
	}





	
	
	

}
