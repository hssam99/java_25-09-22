package studentManager;

import java.util.ArrayList;
import java.util.Scanner;

public class StudentController implements StudentProgram {

	Scanner sc = new Scanner(System.in);

	public int menuPrint(Scanner scan) {
		// TODO Auto-generated method stub
		System.out.println("--menu--");
		System.out.println("1.학생등록|2.학생리스트|3.수강정보검색");
		System.out.println("4.학생정보수정|5.학생삭제|6.수강신청");
		System.out.println("7.수강취소|8.과목수강학생리스트|9.종료");
		System.out.print("menu > ");
		return scan.nextInt();
	}
	
	private ArrayList<Student> stdList = new ArrayList<>();
	private ArrayList<Subject> subList = new ArrayList<>();
	

	// 수강 가능한 강좌 리스트 생성
	public void makeSubjectList() {
		
		subList.add(new Subject("111", "JAVA", "2025-08-01 ~ 2025-08-30", "3hrs", "Oh", "A강의실"));
		subList.add(new Subject("212", "C", "2025-09-01 ~ 2025-09-30", "3hrs", "Kim", "C강의실"));
		subList.add(new Subject("333", "DB", "2025-10-01 ~ 2026-03-30", "6hrs", "Lee", "G강의실"));
		subList.add(new Subject("428", "C++", "2025-10-01 ~ 2026-02-30", "6hrs", "Oh", "G강의실"));
		subList.add(new Subject("512", "python", "2025-09-01 ~ 2025-10-30", "9hrs", "Lee", "A강의실"));
		subList.add(new Subject("688", "AI", "2025-10-01 ~ 2025-12-30", "6hrs", "Kim", "A강의실"));
		subList.add(new Subject("709", "JAVA", "2025-12-01 ~ 2026-06-30", "3hrs", "Jo", "B강의실"));
		subList.add(new Subject("812", "C", "2025-08-15 ~ 2025-10-15", "8hrs", "Hong", "B강의실"));
		subList.add(new Subject("988", "DB", "2025-08-25 ~ 2025-12-25", "10hrs", "Jo", "C강의실"));
	}
	
	// 강좌 리스트 출력
	public void printSubjectList() {
		System.out.println("과목코드\t과목명\t수강날짜\t\t\t수강시간\t강사명\t장소");
		System.out.println("----------------------------------------------------------------");
		for (Subject s : subList) {
			s.printSubjectInfo();
		}
	}
	
	// 디버그용 학생 리스트
	@Override
	public void makeStudentList() {
		
		stdList.add(new Student("20180840", "HONG", 27, "010-7103-5400", "wirye"));
		stdList.add(new Student("20201001", "KIM", 22, "010-1234-5210", "gangnam"));
		stdList.add(new Student("20240810", "KIM", 24, "010-3948-1093", "yongsan"));
		stdList.add(new Student("20221112", "LEE", 25, "010-5678-1080", "yongsan"));
		stdList.add(new Student("20221101", "KANG", 20, "010-9156-4527", "gangnam"));

	}
	
	
	
	public boolean checkId(String tmpId) {
		// 중복된 학번 검사
		for(Student s : stdList) {
			if(s.getStdId().equals(tmpId)) {
				return true; // 학번 존재
			}
		}
		return false; // 학번 없음
	}
	
	

	// 학생 등록 기능 (1번)
	@Override
	public void insertStudent(Scanner sc) {
		Student std = new Student();
		System.out.print("학번>");
		String tmpId = sc.next();
;
		if(checkId(tmpId)) {
			System.out.println("이미 존재하는 학번입니다.");
			return;
		}
	
		std.setStdId(tmpId);
		System.out.print("이름>");
		std.setStdName(sc.next());
		System.out.print("나이>");
		std.setStdAge(sc.nextInt());
		System.out.print("핸드폰번호>");
		std.setStdPhNum(sc.next());
		System.out.print("주소>");
		std.setStdAdd(sc.next());

		stdList.add(std);
		System.out.println("학생 정보가 등록되었습니다.");


	}


	// 등록된 학생리스트 출력 (2번)
	@Override
	public void printStudent() {
		// TODO Auto-generated method stub

		System.out.println("========================학생리스트========================");
		int i = 0;
		for(Student s : stdList) {
			System.out.println((i + 1) + "|  " + s.getStdName() + "(" + s.getStdId()+ ")\t"
					+s.getStdAge() + "\t" + s.getStdPhNum()+ "\t" + s.getStdAdd());
			i++;
		}

	}

//	// 키워드 검색 후 학생 정보 출력 (3번)
//	@Override
//	public void searchStudent(Scanner sc) {
//		// TODO Auto-generated method stub
//
//		System.out.print("검색어 입력 >");
//		String keyword = sc.next().toUpperCase();
//
//		int j = 1;
//		for (int i = 0; i < cnt; i++) {
//			if (keyword.equals(stdList[i].getStdId().toUpperCase())
//					|| keyword.equals(stdList[i].getStdName().toUpperCase())
//					|| keyword.equals(Integer.toString(stdList[i].getStdAge()))
//					|| stdList[i].getStdPhNum().contains(keyword)
//					|| stdList[i].getStdAdd().toUpperCase().contains(keyword)) {
//
//				System.out.println((j) + "|  " + stdList[i].getStdName() + "(" + stdList[i].getStdId() + ")\t"
//						+ stdList[i].getStdAge() + "\t" + stdList[i].getStdPhNum() + "\t" + stdList[i].getStdAdd());
//				j++;
//
//			} else {
////				continue;
//			}
//		}
//
//	}

	// 학생의 학번을 입력받아 그 학생의 번지수를 리턴하는 메소드
	public int searchStudentID(String stdId) {
		
		for(Student s : stdList) {
			if(s.getStdId().equals(stdId)) {
				return stdList.indexOf(s);
			}
		}
		
		return -1;
	}

	
	
	// 학생 수강기록 출력 (3번)
	@Override
	public void searchStudentInfo(Scanner sc) {
		
		System.out.print("학번 >");
		int index = searchStudentID(sc.next()); // 학번 검사. 존재하지 않는 학번이면 -1 리턴

		if (index == -1) {
			System.out.println("해당 학번이 존재하지 않습니다.");
			return;
		}

		System.out.println(stdList.get(index).getStdName()+ "의 수강정보");
		stdList.get(index).printStdSubList();

	}

	// 학생 정보 수정 (4번)
	public void updateStudent(Scanner sc) {
		
		System.out.print("학번 >");
		String tmpId = sc.next();
		int index = searchStudentID(tmpId); // 학번 검사. 존재하지 않는 학번이면 -1 리턴

		if (index == -1) {
			System.out.println("해당 학번이 존재하지 않습니다.");
			return;
		}
		
		System.out.println("----학생 정보 수정----");
		
		System.out.print("학번 >");
		String tmpNewId = sc.next();
		if(checkId(tmpNewId)) {
			System.out.println("이미 존재하는 학번입니다. 수정할 수 없습니다.");
			return;
		}
		stdList.get(index).setStdId(tmpNewId);
		System.out.print("이름 >");
		stdList.get(index).setStdName(sc.next());
		System.out.print("나이 >");
		stdList.get(index).setStdAge(sc.nextInt());
		System.out.print("핸드폰번호>");
		stdList.get(index).setStdPhNum(sc.next());
		System.out.print("주소>");
		stdList.get(index).setStdAdd(sc.next());

		System.out.println("학생 정보가 수정되었습니다.");
	}
	
	// 학생 삭제 (5번)
	public void deleteStudent(Scanner sc) {
		System.out.print("학번 >");
		int index = searchStudentID(sc.next()); // 학번 검사. 존재하지 않는 학번이면 -1 리턴

		if (index == -1) {
			System.out.println("해당 학번이 존재하지 않습니다.");
			return;
		}
		
		stdList.remove(index);
		System.out.println("학생이 삭제되었습니다.");
	}
	
	
	// 수강과목 추가 (6번)
	@Override
	public void insertSubject(Scanner sc) {
		// TODO Auto-generated method stub

		System.out.print("학번 >");
		
		// stdList[index] > 내가 원하는 학생 객체
		int index = searchStudentID(sc.next()); // 학번 검사. 존재하지 않는 학번이면 -1 리턴
		
		if (index == -1) {
			System.out.println("해당 학번이 존재하지 않습니다.");
			return;
		}
		
		// 강좌 리스트 출력
		printSubjectList();
		
		// 강좌 등록
		System.out.print("강좌등록>");
		String keySubId = sc.next();
		boolean result = false;
		Subject tmpSub = new Subject();
		
		// 학생이 입력한 과목코드가 실제 강좌리스트에 존재하는 과목코드인지 검사
		for (Subject s : subList) {
			if (s.getSubId().equals(keySubId)) {
				tmpSub = s;
				result = true;
			}
		}
		
		// 학생이 입력한 과목코드를 실제 강좌리스트에서 찾을 수 없을 경우
		if (result == false) {
			System.out.println("잘못된 과목코드를 입력했습니다.");
			return;
		}
		
		stdList.get(index).addSub(tmpSub);

	}

	
	
	// 수강과목 취소 (7번)
	@Override
	public void deleteSubject(Scanner sc) {
		System.out.print("학번 >");
		int index = searchStudentID(sc.next()); // 학번 검사. 존재하지 않는 학번이면 -1 리턴
		
		if (index == -1) {
			System.out.println("해당 학번이 존재하지 않습니다.");
			return;
		}
		
		stdList.get(index).printStdSubList(); // 한 학생이 수강하고 있는 기록 출력
		stdList.get(index).delSub(sc);
	}

	
	
	
	// 해당 과목 수강 학생 리스트 출력 (8번)
	public void subjectStudentList(Scanner sc) {
		
		printSubjectList();
		System.out.print("과목 코드 입력 >");
		String keySubject = sc.next();
		int i = 0;
		

		
		System.out.println("");
		
		
		for(Student std : stdList) { // 전체 학생 검색
			for(Subject sub : std.getStdSub()) { // 각 학생이 수강하고 있는 수강과목이랑 검색어 과목이랑 비교
				
				if(sub.getSubId().equals(keySubject)) {
					System.out.println((i + 1) + "|  " + std.getStdName() + "(" + std.getStdId()+")");
					i++;
				}
				
			}
		}
		
		
		
	}
}



