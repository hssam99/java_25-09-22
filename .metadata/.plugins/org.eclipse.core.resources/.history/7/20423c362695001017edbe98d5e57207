package bank;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class BankController implements BankProgram {

	
	final String path = "/Users/suminhong/web_0826_hsm/memo/bankAccount/";
	
	List<Bank> bankList = new ArrayList<Bank>(); // 은행 리스트
	
	
	@Override
	public void printMenu() {
		System.out.println("=============== MENU ===============");
		System.out.println("1. 계좌생성 | 2. 입금하기 | 3. 출금하기");
		System.out.println("4. 송금하기 | 5. 계좌정보출력하기 | 6. 종료");
		System.out.println("====================================");
	}
	
	
	// bankName: 은행이름 입력받음
	// keyWord: 사용자가 입력한 계좌정보
	// 해당 은행에 사용자가 입력한 계좌정보가 존재하면 해당 계좌의 인덱스 리턴
	// 존재하지 않으면 -1 리턴
	
	public int ifAccountExistReturnIndex(int bankName, String keyWord) {
		int index = -1;
		
		for(Account acc : bankList.get(bankName).getCustomerList() ) {
			if(acc.getAccountNum().equals(keyWord)) {
				index = bankList.get(bankName).getCustomerList().indexOf(acc); // 해당 계좌 인덱스 리턴
			}
		}
		return index;
		
	}
	
	// 2. 입금하기
	@Override
	public void deposit(Scanner sc) {
		// 은행 선택 (은행번호 리턴)
		int bankName = returnBankName();
		System.out.print("계좌번호 입력 > ");
		String keyWord = sc.next();
		
		
		
		int index = ifAccountExistReturnIndex(bankName, keyWord);
		
		if(index==-1) {
			System.out.println("계좌 정보가 존재하지 않습니다.");
			return;
		}
		
		Account userAccount = new Account();
		userAccount = bankList.get(bankName).getCustomerList().get(index);
		
		System.out.print("입금금액 > ");
		int amount = sc.nextInt();
		int balance = userAccount.getBalance() + amount; // 기존 금액 + 입력한 금액 
		userAccount.setBalance(balance); // balance 업데이트
		
		
		
		switch (bankName) {
		case 0: // 우리은행
			String fileName = path+"우리은행_"+userAccount.getName()+"_"+userAccount.getAccountNum()+".txt";
			try {
				BufferedWriter bw = new BufferedWriter(new FileWriter(fileName, true)); // 이어쓰기
				bw.append("[입금]: "+amount+"원을 입금했습니다");
				bw.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
			break; 
		case 1: // 신한은행
			String fileName2 = path+"신한은행_"+userAccount.getName()+"_"+userAccount.getAccountNum()+".txt";
			try {
				BufferedWriter bw = new BufferedWriter(new FileWriter(fileName2, true)); // 이어쓰기
				bw.append("[입금]: "+amount+"원을 입금했습니다");
				bw.close();

			} catch (IOException e) {
				e.printStackTrace();
			}
			
			break;
		case 2: // 하나은행
			String fileName3 = path+"하나은행_"+userAccount.getName()+"_"+userAccount.getAccountNum()+".txt";
			try {
				BufferedWriter bw = new BufferedWriter(new FileWriter(fileName3, true)); // 이어쓰기
				bw.append("[입금]: "+amount+"원을 입금했습니다");
				bw.close();

			} catch (IOException e) {
				e.printStackTrace();
			}
			
			break; 

		default:
			break;
		}
		
		
		
		
	}

	@Override
	public void withdraw(Scanner sc) {
		
	}

	@Override
	public void transfer(Scanner sc) {
		
	}

	@Override
	public void printAccountHistory() {
		
	}
	
	
	
	// 1. 계좌생성
	public void makeAccountFile(String fileName, Account userAccount)
			throws IOException {
		BufferedWriter bw = new BufferedWriter(new FileWriter(fileName));
		bw.append("======= 계좌 정보 =======");
		bw.newLine();
		bw.append("은행: "+userAccount.getBankName());
		bw.newLine();
		bw.append("계좌주명: "+userAccount.getName());
		bw.newLine();
		bw.append("계좌번호: "+userAccount.getAccountNum());
		bw.newLine();
		bw.append("잔액: "+userAccount.getBalance());
		bw.newLine();
		bw.append("(계좌 기록)");
		bw.newLine();
		bw.append("-----------------------");
		bw.close();
	}
	

	@Override
	public void createAccount(Scanner sc) {
		
		// 은행 선택 (은행번호 리턴)
		int bankName = returnBankName();

		
		// 계좌주명 입력
		System.out.print("계좌주명 > ");
		String name = sc.next();
		
		// 계좌번호 입력
		System.out.print("계좌번호 > ");
		String accountNum = sc.next();
		
		// 계좌 생성
		Account newAccount = new Account();
		newAccount.setName(name); // 계좌주명
		newAccount.setAccountNum(accountNum); // 계좌번호
		
		switch (bankName) {
		case 0: // 우리은행
			newAccount.setBankName("우리은행");
			bankList.get(0).getCustomerList().add(newAccount);
			String fileName = path+"우리은행_"+name+"_"+accountNum+".txt";
			try {
				makeAccountFile(fileName, newAccount);
			} catch (IOException e) {
				e.printStackTrace();
			}; // 히스토리 파일 생성
			
			break; 
		case 1: // 신한은행
			newAccount.setBankName("신한은행");
			bankList.get(1).getCustomerList().add(newAccount);
			String fileName2 = path+"신한은행_"+name+"_"+accountNum+".txt";
			try {
				makeAccountFile(fileName2, newAccount);
			} catch (IOException e) {
				e.printStackTrace();
			}; // 히스토리 파일 생성
			break;
		case 2: // 하나은행
			newAccount.setBankName("하나은행");
			bankList.get(2).getCustomerList().add(newAccount);
			String fileName3 = path+"하나은행_"+name+"_"+accountNum+".txt";
			try {
				makeAccountFile(fileName3, newAccount);
			} catch (IOException e) {
				e.printStackTrace();
			}; // 히스토리 파일 생성
			break; 

		default:
			break;
		}
		
		
		System.out.println(bankList.get(bankName)+"계좌가 등록되었습니다.");
		
		
//		// 계좌번호 랜덤 생성
//		switch (bankName) {
//		case 0: // 우리은행
//			Account newAccount = new Account();
//			boolean isUnique = false; // 중복값이 없음
//			int tempAccountNum = 0;
//			
//			while(isUnique==true) {
//				tempAccountNum = (int)(Math.random()*100)+1; // 1~100까지의 번호 랜덤 생성
//				
//				while()
//				
//				if(tempAccountNum)
//				
//			}
//			String accountNum = "";
//			newAccount.setName(name); // 계좌주명
//			newAccount.setAccountNum(accountNum); // 계좌번호
//			bankList.get(0).getCustomerList().add(newAccount);
//			break;
//
//		default:
//			break;
//		}
		
	}
	

	@Override
	public void makeBankList() {
		bankList.add(new Bank("우리은행"));
		bankList.add(new Bank("신한은행"));
		bankList.add(new Bank("하나은행"));
	}
	
	@Override
	public void printBankList() {
		System.out.println("---은행 리스트---");
		int i = 1;
		for(Bank b : bankList) {
			System.out.println("["+i++ + "] "+b.getCompanyName());
		}
		System.out.println("--------------");
	}

	
	// 은행을 선택하면 해당 은행 인덱스 값 리턴
	public int returnBankName() {
		printBankList();
		System.out.print("은행 선택 > ");
		int bankName = -1;
		while(true) {
			try {
				bankName = sc.nextInt()-1; // 리스트 인덱스는 사용자가 입력한 값의 -1
				break;
			} catch (Exception e) {
				System.out.println("없는 옵션입니다. 다시 선택하세요.");
			}
		}
		return bankName;
	}

//	public 
	
	
	
	
	

}
