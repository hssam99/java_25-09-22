package day18;

public class Thread03 {

	public static void main(String[] args) {

		// 1 ~ 50 출력, 51~100 출력
		// 두개의 Thread가 실행되고 난 후 
		// Thread 0 합계 출력 -> 1초 후 
		// Thread 1 합계 출력 -> 1초 후 
		// main Thread 0 , Thread 2 출력
		// Thread.sleep() : 일정 시간 대기 상태
		
		System.out.println("> main start: " + System.currentTimeMillis());
		JoinTest t1 = new JoinTest(1,50);
		JoinTest t2 = new JoinTest(51,100);
		
		t1.start();
		
		
		try {
			t1.join();
			t1.sleep(1000);
		} catch (InterruptedException e) {
			// TODO: handle exception
			e.printStackTrace();
		}
		
		System.out.println("Thread 1 total >"+t1.getTotal());
		
		t2.start();
		
		try {
			t2.join();
			t2.sleep(1000);
		} catch (InterruptedException e) {
			// TODO: handle exception
			e.printStackTrace();
		}
		
		System.out.println("Thread 2 total >"+t2.getTotal());
		
		
		System.out.println("last total >"+t1.getTotal()+t2.getTotal());
		
		
		System.out.println("> main end: " + System.currentTimeMillis());
		
		
		
	}

}


class JoinTest extends Thread{
	private int start;
	private int end;
	private int total=0;
	
	public JoinTest() {}
	
	public JoinTest(int start, int end){
		this.start = start;
		this.end = end;
	}
	
	@Override
	public void run() {
		for(int i = start; i<end; i++) {
			System.out.println(i);
			total +=i;
		}
	}

	public int getStart() {
		return start;
	}

	public void setStart(int start) {
		this.start = start;
	}

	public int getEnd() {
		return end;
	}

	public void setEnd(int end) {
		this.end = end;
	}

	public int getTotal() {
		return total;
	}

	public void setTotal(int total) {
		this.total = total;
	}
	
}

