package day16;

import java.util.Arrays;
import java.util.stream.IntStream;

public class Stream01 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		/*
		 * - 자료구조를 복사하여 스트림 객체로 생성
		 * - 스트림을 이용한 연산을 수행
		 * - 연산을 수행한 스트림은 소모됨.
		 * - 스트림은 기존 자료를 변경할 수 없음.
		 * - 메소드 체이닝 방식을 사용.
		 * - 스트림만의 연산을 가지고 있음
		 * 
		 * 
		 * 중간연산 / 최종연산
		 * 
		 * - 최종연산
		 * forEach() : 리스트내를 순회하며 요소의 값을 얻어서 구성
		 * findFirst(): 조건에 일치하는 요소중 가장 앞에 있는 요소  리턴
		 * findAny() : 조건에 일치하는 요소 중 가장 먼저 탐색되는 요소 리턴
		 * anyMatch(): 조건에 맞는 요소가 하나라도 있다면 true
		 * allMatch(): 조건에 모든 요소가 맞다면 true
		 * noneMatch(): 조건에 맞는 요소가 없다면 true
		 * count(), min(), max(): 개수, 작은값, 큰값을 리턴
		 * sum(), average(): 요소의 합계, 평균 리턴
		 * collect(): 스트림 내의 요소를 수집하여 사용자가 원하는 형태로 반환 
		 * toArray() : 배열로 리턴
		 * 
		 * - 중간연산
		 * filter() : 조건에 맞는 결과값을 필터링
		 * distinct() : 중복된 값 제거
		 * map() : 요소의 값을 원하는 값으로 반환
		 * sorted(): 정렬
		 * peek() : 작업 수행 후 스트림 리턴
		 * skip() : 스트림의 일부를 건너뜀.
		 * limit(): 스트림의 일부를 잘라냄.
		 */
		
		int arr[] = {1,2,3,4,5,6,7,8,9,10,11,12,3,5,3,7,8,4,2};
		
		// 일반적인 합계 구하는 방식
		int sum = 0;
		for(int i : arr) {
			sum+=i;
		}
		System.out.println(sum);
		
		
		System.out.println("---using Stream---");
		System.out.println(Arrays.stream(arr).sum()); // 스트림으로 구성하고 sum을 사용해야함.
		
		IntStream is = Arrays.stream(arr);
		System.out.println(is.sum()); 
		System.out.println(is.count()); // 소모됨 에러
		
		
		
		
		

	}

}
