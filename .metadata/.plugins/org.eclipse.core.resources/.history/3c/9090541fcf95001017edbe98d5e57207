package bank;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class BankController implements BankProgram {
	
	List<Bank> bankList = new ArrayList<Bank>(); // 은행 리스트
	
	
	
	public void makeUserListTemp() {
		// 우리은행
		Account acc1 = new Account(bankList.get(0).getCompanyName(), "이지은", "1001", 200000);
		bankList.get(0).getCustomerList().add(acc1);
		try {
			makeAccountFile(acc1.getFileName(), acc1);
		} catch (IOException e) {
			e.printStackTrace();
		}
		Account acc2 = new Account(bankList.get(0).getCompanyName(), "장원영", "1002", 100000);
		bankList.get(0).getCustomerList().add(acc2);
		try {
			makeAccountFile(acc2.getFileName(), acc2);
		} catch (IOException e) {
			e.printStackTrace();
		}
		
	}
	
	
	
	
	@Override
	public void printMenu() {
		System.out.println("=============== MENU ===============");
		System.out.println("1. 계좌생성 | 2. 입금하기 | 3. 출금하기");
		System.out.println("4. 송금하기 | 5. 계좌정보출력하기 | 6. 종료");
		System.out.println("====================================");
	}
	

	
	// 2. 입금하기
	@Override
	public void deposit(Scanner sc) {
		// 은행 선택 (은행번호 리턴)
		int bankName = returnBankName();
		
		System.out.print("계좌번호 입력 > ");
		String keyWord = sc.next();
		
		int index = bankList.get(bankName).findAccount(keyWord);
		
		
		if(index==-1) {
			System.out.println("계좌 정보가 존재하지 않습니다.");
			return;
		}
		
		Account userAccount = bankList.get(bankName).getCustomerList().get(index);
		
		System.out.print("입금금액 > ");
		int amount = sc.nextInt();
		int balance = userAccount.getBalance() + amount; // 기존 금액 + 입력한 금액 
		userAccount.setBalance(balance); // balance 업데이트
		userAccount.saveTransactionLog(0, amount); // deposit code = 0
		
	}

	
	// 3. 출금하기
	@Override
	public void withdraw(Scanner sc) {
		
		// 은행 선택 (은행번호 리턴)
		int bankName = returnBankName();
		
		System.out.print("계좌번호 입력 > ");
		String keyWord = sc.next();
		
		// 계좌 검색
		// 존재하면 계좌 인덱스 리턴
		int index = bankList.get(bankName).findAccount(keyWord);
		
		if(index==-1) {
			System.out.println("계좌 정보가 존재하지 않습니다.");
			return;
		}
		
		Account userAccount = bankList.get(bankName).getCustomerList().get(index);
		
		System.out.print("출금금액 > ");
		int amount = sc.nextInt();
		int balance = userAccount.getBalance() - amount; // 기존 금액 - 입력한 금액
		
		if(balance<=0) {
			System.out.println("계좌에 잔액이 부족합니다. 출금할 수 없습니다.");
			return;
		}
		
		userAccount.setBalance(balance); // balance 업데이트
		userAccount.saveTransactionLog(1, amount); // withdraw code = 1
		
		
	}

	
	// 4. 송금하기
	@Override
	public void transfer(Scanner sc) {
		// 보내는 이 은행 선택 (은행번호 리턴)
		System.out.println("----- 보내는이 -----");
		int senderBankName = returnBankName();
		System.out.print("계좌번호 입력 > ");
		String keyWord = sc.next();
		
		int senderIndex = bankList.get(senderBankName).findAccount(keyWord);
		
		if(senderIndex==-1) {
			System.out.println("계좌 정보가 존재하지 않습니다.");
			return;
		}
		
		Account senderAcc = bankList.get(senderBankName).getCustomerList().get(senderIndex); // 보내는이 객체 생성
		
		// 받는 이 은행 선택 (은행번호 리턴)
		System.out.println("----- 받는이 -----");
		int receiverBankName = returnBankName();
		System.out.print("계좌번호 입력 > ");
		keyWord = sc.next();
		
		int recieverIndex = bankList.get(receiverBankName).findAccount(keyWord);
		
		if(recieverIndex==-1) {
			System.out.println("계좌 정보가 존재하지 않습니다.");
			return;
		}
		
		Account receiverAcc = bankList.get(receiverBankName).getCustomerList().get(recieverIndex); // 받는이 객체 생성
		
		// 송금 금액 입력
		System.out.print("금액 입력 > ");
		int amount = sc.nextInt();
		
		
		// 이체 처리
		
		// 1. 송금자
		int senderBalance = senderAcc.getBalance()-amount;
		if(senderBalance<=0) {
			System.out.println("계좌에 잔액이 부족합니다. 출금할 수 없습니다.");
			return;
		}
		senderAcc.setBalance(senderBalance);
		
		try {
			BufferedWriter bw = new BufferedWriter(new FileWriter(senderAcc.getFileName(), true)); // 이어 쓰기
			bw.append("[출금]: "+receiverAcc.getName()+"님에게 "+amount+"원을 송금했습니다");
			bw.newLine();
			bw.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		
		// 2. 받는자
		int receiverBalance = receiverAcc.getBalance()+amount;
		receiverAcc.setBalance(receiverBalance);
		
		try {
			BufferedWriter bw = new BufferedWriter(new FileWriter(receiverAcc.getFileName(), true)); // 이어 쓰기
			bw.append("[입금]: "+senderAcc.getName()+"님이 "+amount+"원을 송금했습니다");
			bw.newLine();
			bw.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		System.out.println("송금을 완료했습니다.");
		
	}

	
	
	// 5. 계좌 정보 출력하기
	@Override
	public void printAccountHistory(Scanner sc) {
		
		// 은행 선택 (은행번호 리턴)
		int bankName = returnBankName();
		
		System.out.print("계좌번호 입력 > ");
		String keyWord = sc.next();
		
		// 계좌 검색
		// 존재하면 계좌 인덱스 리턴
		int index = bankList.get(bankName).findAccount(keyWord);
		
		if(index==-1) {
			System.out.println("계좌 정보가 존재하지 않습니다.");
			return;
		}
		
		Account userAccount = bankList.get(bankName).getCustomerList().get(index);
		
		try (BufferedReader br = new BufferedReader(new FileReader(userAccount.getFileName()))) {
            String line;
            while ((line = br.readLine()) != null) { // 한 줄씩 읽기
                System.out.println(line);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
		
		
		
		
	}
	
	
	
	// 1. 사용자 히스토리 로그 생성
	public void makeAccountFile(String fileName, Account userAccount)
			throws IOException {
		BufferedWriter bw = new BufferedWriter(new FileWriter(fileName));
		bw.append("======= 계좌 정보 =======");
		bw.newLine();
		bw.append("은행: "+userAccount.getBankName());
		bw.newLine();
		bw.append("계좌주명: "+userAccount.getName());
		bw.newLine();
		bw.append("계좌번호: "+userAccount.getAccountNum());
		bw.newLine();
		bw.append("(계좌 기록)");
		bw.newLine();
		bw.append("-----------------------");
		bw.newLine();
		bw.close();
	}

	
	

	// 1. 사용자 계정 생성
	@Override
	public void createAccount(Scanner sc) {
		
		// 은행 선택
		int bankName = returnBankName(); // 은행 번호 리턴
		String bankCompanyName = bankList.get(bankName).getCompanyName(); // 은행 이름

		
		// 계좌주명 입력
		System.out.print("계좌주명 > ");
		String name = sc.next();
		
		// 계좌번호 입력
		System.out.print("계좌번호 > ");
		String accountNum = sc.next();
		
		// 계좌 생성
		Account newAccount = new Account();
		newAccount.setName(name); // 계좌주명
		newAccount.setAccountNum(accountNum); // 계좌번호
		newAccount.setBankName(bankCompanyName); // 은행이름
		bankList.get(bankName).getCustomerList().add(newAccount);
		
		// 히스토리 파일 생성
		String fileName = newAccount.getFileName();
		try {
			makeAccountFile(fileName, newAccount);
		} catch (IOException e) {
			e.printStackTrace();
		}; 

		System.out.println(bankList.get(bankName)+"계좌가 등록되었습니다.");
		
	}
	

	@Override
	public void makeBankList() {
		bankList.add(new Bank("우리은행"));
		bankList.add(new Bank("신한은행"));
		bankList.add(new Bank("하나은행"));
	}
	
	@Override
	public void printBankList() {
		System.out.println("---은행 리스트---");
		int i = 1;
		for(Bank b : bankList) {
			System.out.println("["+i++ + "] "+b.getCompanyName());
		}
		System.out.println("--------------");
	}

	
	// 은행을 선택하면 해당 은행 인덱스 값 리턴
	public int returnBankName() {
		printBankList();
		int bankName = 0;
		do{
			try {
				System.out.print("은행 선택 > ");
				bankName = sc.nextInt()-1; // 리스트 인덱스는 사용자가 입력한 값의 -1
				break;
			} catch (Exception e) {
				System.err.println("없는 옵션입니다. 다시 선택하세요.");
				sc.nextLine();
			}
		}while(true);
		return bankName;
	}

	
	
	
	

}
