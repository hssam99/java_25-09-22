package f1_project;

import java.io.IOException;
import java.util.Random;
import java.util.Scanner;

public class SuzukaController {
	CircuitController cc = new CircuitController();
	DotArtController dac = new DotArtController();
	GameController gc = new GameController();
	
	Scanner sc = new Scanner(System.in);
	Random random = new Random();
	
	private int circuitIndex;
	public Circuit suzuka;
	
	
	public SuzukaController(Driver userDriver, int circuitNum) throws InterruptedException, IOException {
		this.circuitIndex=circuitNum;
		suzuka = cc.getCircuitList().get(circuitIndex);
	}
	
	
	
	public void introCircuit() throws InterruptedException {
		dac.printSuzukaCircuitImage();
		System.out.print("entering Suzuka");
		gc.printLoadingDot();

		suzuka.printCircuitInfo();
		gc.printLoadingDot();
		System.out.print("Loading");
		gc.printLoadingDot();
		
		System.out.println("============================ GAME START ============================");
		System.out.println();
		
		
		String text1 = "안녕하십니까, 오늘은 일본 그랑프리의 심장, 스즈카 서킷 현장에 나와 있습니다.";
		gc.printStringOnebyOne(text1);
		String text2 = "1958년 개장 이래 전 세계 모터스포츠 팬들이 손꼽아 기다려온 전통의 서킷이죠.";
		gc.printStringOnebyOne(text2);
		System.out.println();
		String text3 = "스즈카는 독특하게도 숫자 8 모양을 그리는 독창적인 레이아웃으로 유명하며, 긴 직선과 기술적";
		gc.printStringOnebyOne(text3);
		String text4 = "난이도가 높은 코너들이 연속적으로 이어집니다. 드라이버들의 정밀한 기술이 시험되는 곳이죠.";
		gc.printStringOnebyOne(text4);
		System.out.println();
		String text5 = "오늘도 세계 최정상 드라이버들이 이 전설의 코스를 질주하며 치열한 경쟁을 펼칠 예정입니다.";
		gc.printStringOnebyOne(text5);
		String text6 = "잠시 후, 스즈카 서킷에서 펼쳐질 뜨거운 레이스가 시작됩니다!\"";
		gc.printStringOnebyOne(text6);
		System.out.println();
		System.out.println("===================================================================");
		System.out.println();
		System.out.println();
	}
	
	
	public void printCourse1() {
		System.out.println("====================== Course 1 : Degner Curve =========================");
		System.out.println();
		String txt1 = "레이스 초반, 드라이버들이 데그너 커브에 진입합니다!";
		gc.printStringOnebyOne(txt1);
		String txt2 = "연속 좌우 코너로 구성되어 있어 드라이버의 컨트롤 능력이 핵심입니다.";
		gc.printStringOnebyOne(txt2);
		String txt3 = "빠른 진입과 섬세한 조향이 요구되는 이 커브는 초반부터 드라이버의 집중력과 용기를 시험하는 곳이죠.";
		gc.printStringOnebyOne(txt3);
		String txt4 = "적정 속도는 약 200~220 km/h 정도로, 안정적인 라인 확보가 랩 타임에 큰 영향을 줍니다.";
		gc.printStringOnebyOne(txt4);
		System.out.println();
		System.out.println("=========================================================================");
		System.out.println();
		System.out.println();
	}
	
	public void printCourse2() {
		System.out.println("============================ Course 2 : Spoon Curve  ============================");
		System.out.println();
		String txt1 = "스즈카 서킷의 상징적인 Spoon Curve에 진입합니다!";
		gc.printStringOnebyOne(txt1);
		String txt2 = "긴 좌회전 구간에서 차량 세팅과 브레이킹 기술이 빛을 발하는 순간이죠.";
		gc.printStringOnebyOne(txt2);
		String txt3 = "90~130 km/h 로 달리며 완벽한 라인을 타야만 경쟁에서 우위를 점할 수 있습니다.";
		gc.printStringOnebyOne(txt3);
		System.out.println();
		System.out.println("============================================================================");
		System.out.println();
		System.out.println();
	}
	
	public void printCourse3() {
		System.out.println("============================ Course 3 : 130R  ============================");
		System.out.println();
		String txt1 = "드라이버들이 스즈카에서 가장 도전적인 코너, 130R에 진입했습니다!";
		gc.printStringOnebyOne(txt1);
		String txt2 = "이 초고속 좌코너는 드라이버의 용기와 차량의 성능을 한껏 시험하는 구간으로,";
		gc.printStringOnebyOne(txt2);
		String txt3 = "약 300~310 km/h의 속도로 진입해도 안전하게 탈출하는 것이 핵심입니다.";
		gc.printStringOnebyOne(txt3);
		String txt4 = "한 치의 실수도 용납되지 않으며, 여기서의 라인 선택이 랩 타임을 좌우합니다.";
		gc.printStringOnebyOne(txt4);
		System.out.println();
		System.out.println("=============================================================================");
		System.out.println();
		System.out.println();
	}
	
	
	public void playSuzuka(Driver driver) throws InterruptedException, IOException {
		
		Driver userDriver = CircuitController.pc.getDriverListForGrandPix().get(driver.getDriverNum()-1);
		
		
		introCircuit();
		
		// 스타트 코스
		userDriver.setCurrentSpeed(cc.start()); 
		cc.generateAICurrentSpeeds(userDriver, 300, 900); // AI 드라이버 속도 300~900 사이 지정
		cc.setStartPoint(); // 스타트 포인트 각 드라이버별로 s기록
		
		Thread.sleep(1000);
		System.out.println();
		System.out.println();
		
		
		System.out.println(userDriver.getDriverName() + " 선수 "+userDriver.getCircuitRank()+"위로 출발합니다!");
		gc.printLoadingDot();
		System.out.println("치열한 경쟁! " + CircuitController.pc.driverListForGrandPix.get(random.nextInt(4)).getDriverName() + " 선수가 추월에 성공했습니다!");
		gc.printLoadingDot();
		System.out.println(CircuitController.pc.driverListForGrandPix.get(random.nextInt(4)).getDriverName() + " 선수가 좋은 코너링으로 속도를 유지합니다!");
		Thread.sleep(1000);
		System.out.println();
		System.out.println();
		
		// 1번 코스 [Degner Curve] : 곡선
		Course course1 = new Course(1, "Degner Curve", 2, 191); // 1-직선 2-곡선 3-유턴
		suzuka.getCourseList().add(course1);
		
		printCourse1();
		
		System.out.print("속도를 입력하세요 > ");
		userDriver.setCurrentSpeed(sc.nextInt());
		sc.nextLine();
		cc.generateAICurrentSpeeds(userDriver, 180, 210);
		System.out.println();
		cc.setCurrentPoint(suzuka.getCourseList().get(0).getBestSpeed()); // get(0) > 1번째 코스
		
		Thread.sleep(1000);
		System.out.println();
		System.out.println();
		
		// 중간 메시지
		gc.printRandomMessagesAfterCourse(course1.getCourseType());
		
		
		// 2번 코스 [Spoon Curve]: 곡선
		Course course2 = new Course(2, "Spoon Curve", 2, 118); // 1-직선 2-곡선 3-유턴
		suzuka.getCourseList().add(course2);
		
		printCourse2();
		
		System.out.print("속도를 입력하세요 > ");
		userDriver.setCurrentSpeed(sc.nextInt());
		sc.nextLine();
		cc.generateAICurrentSpeeds(userDriver, 90, 130);
		System.out.println();
		cc.setCurrentPoint(suzuka.getCourseList().get(1).getBestSpeed()); // get(1) > 2번째 코스
		
		Thread.sleep(1000);
		System.out.println();
		System.out.println();
		
		// 중간 메시지
		gc.printRandomMessagesAfterCourse(course2.getCourseType());
		
		
		// 3번 코스 [130R]
		Course course3 = new Course(3, "130R", 2, 324); // 1-직선 2-곡선 3-유턴
		suzuka.getCourseList().add(course3);
		
		printCourse3();
		
		System.out.print("속도를 입력하세요 > ");
		userDriver.setCurrentSpeed(sc.nextInt());
		sc.nextLine();
		cc.generateAICurrentSpeeds(userDriver, 305, 335);
		System.out.println();
		cc.setCurrentPoint(suzuka.getCourseList().get(2).getBestSpeed()); // get(2) > 3번째 코스
		
		
		Thread.sleep(1000);
		System.out.println();
		System.out.println();
		
		// 중간 메시지
		gc.printRandomMessagesAfterCourse(course3.getCourseType());
		
		
		System.out.println(userDriver.getDriverName() + " 선수 "+userDriver.getCircuitRank()+"위로 들어오고 있습니다!!!!!");
		gc.printLoadingDot();
		System.out.println("정말 멋진 성적이네요, 곧 체크 플레그가 휘날립니다!!");
		gc.printLoadingDot();
		Thread.sleep(1000);
		System.out.println();
		System.out.println();
		
		
		// 피날레 이미지 출력
		
		dac.printCheckFlag();
		Thread.sleep(500);
		dac.printFireWork();
		Thread.sleep(500);
		dac.printFinish();
		
		
		Thread.sleep(1000);
		System.out.println();
		System.out.println();
		
		
		// 순위 공개
		
		System.out.println("======================================================================================");
		System.out.println();
		System.out.println(suzuka.getCircuitLocation()+" 그랑프리가 종료되었습니다.");
		gc.printLoadingDot();
		System.out.println("잠시 후 "+suzuka.getCircuitName()+" 파이널 순위가 공개됩니다.");
		gc.printLoadingDot();
		System.out.println("======================================================================================");
		System.out.println();
		System.out.println();
		System.out.println();
		dac.printGrandPrixStandingImage();
		System.out.println("RANK \t DRIVER \t\t TEAM \t\t\t POINT");
		System.out.println("-------------------------------------------------------------------------------------");
		System.out.println();
		cc.printGrandpixStanding();
		System.out.println();
		System.out.println("=====================================================================================");
		
		
		for(Constructor cs : CircuitController.pc.constructorList) {
			for(Driver d : cs.getDriverList()) {
				cs.setConstructorPoint(cs.getConstructorPoint()+d.getCircuitPoint());  // 컨스트럭터 포인트 누적
			}
		}
		
		
		for(Driver d : CircuitController.pc.driverListForGrandPix) {
			d.setDriverPoint(d.getDriverPoint()+d.getCircuitPoint()); // driverPoint 누적

			// 다음 그랑프리를 위해 그랑프리 값 초기화
			d.setCircuitPoint(0);
			d.setCircuitRank(0);
			d.setCurrentSpeed(0);
			
		}
	}

}
